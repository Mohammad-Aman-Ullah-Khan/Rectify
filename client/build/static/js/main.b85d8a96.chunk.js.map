{"version":3,"sources":["actions/types.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","store.js","utils/setAuthToken.js","actions/authActions.js","components/layout/Navbar.js","components/layout/Landing.js","components/auth/Register.js","components/auth/Login.js","PrivateRoute.js","components/dashboard/LogsTable.js","components/dashboard/ProfDashboard.js","components/dashboard/StudentDashboard.js","components/dashboard/Dashboard.js","components/exam_page/Object_Detection.js","components/exam_page/TestPage.js","App.js","index.js"],"names":["GET_ERRORS","USER_LOADING","SET_CURRENT_USER","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","action","type","payload","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","logoutUser","dispatch","localStorage","removeItem","Navbar","className","to","style","fontFamily","Landing","height","width","borderRadius","letterSpacing","Component","Register","onChange","e","setState","target","id","value","onToggle","userType","onSubmit","preventDefault","newUser","name","email","password","password2","props","registerUser","history","nextProps","this","push","paddingLeft","noValidate","error","classnames","invalid","htmlFor","class","checked","marginTop","connect","userData","post","then","res","catch","err","response","data","withRouter","Login","loginUser","emailnotfound","passwordincorrect","setItem","jwt_decode","component","rest","render","descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","map","el","index","sort","headCells","numeric","disablePadding","label","EnhancedTableHead","onSelectAllClick","onRequestSort","numSelected","rowCount","TableHead","TableRow","headCell","TableCell","align","padding","sortDirection","TableSortLabel","active","direction","onClick","property","event","Box","sx","visuallyHidden","EnhancedTableToolbar","Toolbar","pl","sm","pr","xs","bgcolor","theme","alpha","palette","primary","main","activatedOpacity","Typography","flex","color","variant","Tooltip","title","IconButton","LogsTable","React","useState","exam_code","setExamCode","visibility","setVisibility","error_text","setErrorText","setOrder","setOrderBy","selected","setSelected","page","setPage","dense","rowsPerPage","setRowsPerPage","rows","setRows","TableData","setTableData","searched","setSearched","getData","get","prof_email","console","log","curr_logs","i","length","obj","Object","s_no","student_name","student_email","tab_change_count","key_press_count","face_not_visible","multiple_faces_found","mobile_found","prohibited_object_found","message","requestSearch","searchVal","filteredRows","filter","row","toLowerCase","includes","emptyRows","Math","min","TextField","autoFocus","margin","required","marginLeft","textAlign","Paper","mb","onCancelSearch","border","TableContainer","Table","minWidth","aria-labelledby","size","newSelecteds","n","company","TableBody","slice","indexOf","labelId","hover","scope","colSpan","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","examDialogOpen","setExamDialogOpen","setName","exam_link","setExamLink","Date","date_time_start","setDateTimeStart","duration","setDuration","errorText","exam_code_search","closeExamDialog","split","Dialog","open","onClose","repositionOnUpdate","DialogTitle","DialogContent","DialogContentText","fullWidth","LocalizationProvider","dateAdapter","AdapterDateFns","DateTimePicker","renderInput","newValue","minDate","minTime","disabled","Button","result","characters","charactersLength","charAt","floor","random","navigator","clipboard","writeText","DialogActions","test","current_date_time","swal","setError","moment","useHistory","date_string","exam_date_time_start","exam_date_time_end","add","toDate","curr_date_time","diff","abs","diff_mins","diff_secs","mins_left","secs_left","pathname","Dashboard","onLogoutClick","Detection","videoRef","createRef","canvasRef","detectFrame","video","model","detect","predictions","current","renderPredictions","requestAnimationFrame","ctx","getContext","clearRect","canvas","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","textHeight","fillRect","fillText","faces","FaceNotVisible","MobilePhone","ProhibitedObject","MultipleFacesVisible","toString","mediaDevices","getUserMedia","webCamPromise","audio","facingMode","stream","window","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","cocoSsd","all","values","autoPlay","playsInline","muted","ref","TestPage","location","exam_id","form_link","minutes","setMinutes","seconds","setSeconds","tab_change","setTabChange","key_press","setKeyPress","mobile_phone_found","setMobilePhoneFound","setProhibitedObjectFound","setFaceNotVisible","multiple_faces_visible","setMultipleFacesVisible","checkedPrevLogs","setCheckedPrevLogs","handleVisibilityChange","document","hidden","handleKeyPress","altKey","ctrlKey","useEffect","addEventListener","removeEventListener","myInterval","setInterval","clearInterval","fontSize","src","jwtToken","currentTime","now","exp","href","App","exact","path","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b85d8a96.chunk.js","sourcesContent":["export const GET_ERRORS = \"GET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import {\n    SET_CURRENT_USER,\n    USER_LOADING\n  } from \"../actions/types\";\n\n  const isEmpty = require(\"is-empty\");\n\n  // define the initial state for \"auth\"\n  const initialState = {\n    isAuthenticated: false,\n    user: {},\n    loading: false\n  };\n\n  /**\n   * Combined function for setting current user and setting user_loading\n   * @param {State} state \n   * @param {string} action \n   * @returns new state\n   */\n  export default function(state = initialState, action) {\n    switch (action.type) {\n      case SET_CURRENT_USER:\n        return {\n          ...state,\n          isAuthenticated: !isEmpty(action.payload),\n          user: action.payload\n        };\n      case USER_LOADING:\n        return {\n          ...state,\n          loading: true\n        };\n      default:\n        return state;\n    }\n  }","import { GET_ERRORS } from \"../actions/types\";\nconst initialState = {};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return action.payload;\n    default:\n      return state;\n  }\n}","import { combineReducers } from \"redux\";\nimport authReducer from \"./authReducer\";\nimport errorReducer from \"./errorReducer\";\n\n// combines the authReducer and errorReducer\nexport default combineReducers({\n  auth: authReducer,\n  errors: errorReducer\n});","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    \n  )\n);\nexport default store;","import axios from \"axios\";\n\nconst setAuthToken = token => {\n\n  if (token) {\n    // Apply authorization token to every request if logged in\n    axios.defaults.headers.common[\"Authorization\"] = token;\n  } \n  else {\n    // Delete auth header\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n  \n};\nexport default setAuthToken;","import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"./types\";\n\n/**\n * Registers the user by calling an API to the backend, dispatches errors \n * if any\n * \n * @param {Object} userData \n * @param {useHistory} history \n * \n */\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n/**\n * Logs in the user by calling API to the backend, recieves token, decodes\n * it using jwt_decode, saves token to local storage and auth headers, sets current user\n * \n * @param {Object} userData \n * \n */\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then(res => {\n      \n\n      const { token } = res.data;\n      // Set token to localStorage\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n/**\n * Logs out the user by deleting the JWT Token, removing it from header and\n * setting current user to empty\n * \n */\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * Creates the navbar that sticks to the top and is present on\n * all pages\n */\nexport default function Navbar() {\n  return (\n    <div className=\"navbar-fixed\" >\n    <nav className=\"z-depth-0\" >\n      <div className=\"nav-wrapper white\" >\n        <Link\n          to=\"/\"\n          style={{\n            fontFamily: \"monospace\",\n          }}\n          className=\"col s5 brand-logo center black-text\"\n        >\n          <i className=\"material-icons\">visibility</i>\n          RECTIFY\n        </Link>\n      </div>\n    </nav>\n  </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * Creates the landing page that has 2 buttons Register and Login\n * Button presses redirect to the correct component\n */\nclass Landing extends Component {\n\n  render() {\n    return (\n      <div style={{ height: \"80vh\" }} className=\"container valign-wrapper\">\n        <div className=\"row\">\n          <div className=\"col s12 center-align\">\n            <h4>\n                <b>Secure </b>your online exams with{\" \"}\n              <span style={{ fontFamily: \"Consolas\" }}><b>Rectify</b></span> and ensure cheating free exams!\n            </h4>\n            <p className=\"flow-text grey-text text-darken-1\">\n              Create an exam, share unique code with students and monitor them in real time from the dashboard. It's this simple and easy to use!\n            </p>\n            <br />\n            <div className=\"col s6\">\n              <Link\n                to=\"/register\"\n                style={{\n                  width: \"140px\",\n                  borderRadius: \"3px\",\n                  letterSpacing: \"1.5px\"\n                }}\n                className=\"btn btn-large waves-effect waves-light hoverable blue accent-5\"\n              >\n                Register\n              </Link>\n            </div>\n            <div className=\"col s6\">\n              <Link\n                to=\"/login\"\n                style={{\n                  width: \"140px\",\n                  borderRadius: \"3px\",\n                  letterSpacing: \"1.5px\"\n                }}\n                className=\"btn btn-large waves-effect waves-light hoverable blue accent-5\"\n              >\n                Log In\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Landing;","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\nclass Register extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n      userType:false,\n      errors: {}\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    // If erros are detected in the form update error state so they are visible to the user\n    if (nextProps.errors) {\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n\n  componentDidMount() {\n    // If logged in and user navigates to Register page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n  }\n\n  /**\n   * Combined on change function for all components.\n   * The input event is used to get id which is the same as state name\n   * So the value of state is set to be event.target.value which is the \n   * value inputted by user\n   * @param {event} e\n   * \n   */\n  onChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  };\n\n  /**\n   * Toggler Function for the Are you an instructor? Switch\n   * The input event is used to get id which is the same as state name\n   * So the value of state is set to be event.target.value which is the \n   * value inputted by user\n   * @param {event} e\n   * \n   */\n  onToggle=e=>{\n    this.setState({[e.target.id]:!this.state.userType});\n  }\n\n  /**\n   * This function is triggered when user presses register button\n   * This sends email and password to registerUser function in authActions.js\n   * @param {Event} e \n   */\n  onSubmit = e => {\n    e.preventDefault();\n    const newUser = {\n          name: this.state.name,\n          email: this.state.email,\n          password: this.state.password,\n          password2: this.state.password2,\n          userType: this.state.userType,\n        };\n    this.props.registerUser(newUser, this.props.history); \n  };\n\n  \n  render() {\n      const { errors } = this.state;\n  return (\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col s8 offset-s2\">\n              <Link to=\"/\" className=\"btn-flat waves-effect\">\n                <i className=\"material-icons left\">keyboard_backspace</i> Back to\n                home\n              </Link>\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                <h4>\n                  <b>Register</b> below\n                </h4>\n                <p className=\"grey-text text-darken-1\">\n                  Already have an account? <Link to=\"/login\">Log in</Link>\n                </p>\n              </div>\n              <form noValidate onSubmit={this.onSubmit}>\n                <div className=\"input-field col s12\">\n                  <input\n                    onChange={this.onChange}\n                    value={this.state.name}\n                    error={errors.name}\n                    id=\"name\"\n                    type=\"text\"\n                    className={classnames(\"\", {\n                      invalid: errors.name\n                    })}\n                  />\n                  <label htmlFor=\"name\">Name</label>\n                  <span className=\"red-text\">{errors.name}</span>\n                </div>\n                <div className=\"input-field col s12\">\n                  <input\n                    onChange={this.onChange}\n                    value={this.state.email}\n                    error={errors.email}\n                    id=\"email\"\n                    type=\"email\"\n                    className={classnames(\"\", {\n                      invalid: errors.email\n                    })}\n                  />\n                  <label htmlFor=\"email\">Email</label>\n                  <span className=\"red-text\">{errors.email}</span>\n                </div>\n                <div className=\"input-field col s12\">\n                  <input\n                    onChange={this.onChange}\n                    value={this.state.password}\n                    error={errors.password}\n                    id=\"password\"\n                    type=\"password\"\n                    className={classnames(\"\", {\n                      invalid: errors.password\n                    })}\n                  />\n                  <label htmlFor=\"password\">Password</label>\n                  <span className=\"red-text\">{errors.password}</span>\n                </div>\n                <div className=\"input-field col s12\">\n                  <input\n                    onChange={this.onChange}\n                    value={this.state.password2}\n                    error={errors.password2}\n                    id=\"password2\"\n                    type=\"password\"\n                    className={classnames(\"\", {\n                      invalid: errors.password2\n                    })}\n                  />\n                  <label htmlFor=\"password2\">Confirm Password</label>\n                  <span className=\"red-text\">{errors.password2}</span>\n                </div>\n                <div class=\"switch col s12\">\n                <label>\n                  Are you an instructor?\n                  <input type=\"checkbox\" id = \"userType\" checked={this.state.userType} onChange={this.onToggle}></input>\n                  <span className=\"lever\"></span>\n                  \n                </label>\n              </div>\n                \n              {  <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                  <button\n                    style={{\n                      width: \"150px\",\n                      borderRadius: \"3px\",\n                      letterSpacing: \"1.5px\",\n                      marginTop: \"1rem\"\n                    }}\n                    type=\"submit\"\n                    className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                  >\n                    Sign up\n                  </button>\n                </div>}\n              </form>\n            </div>\n          </div>\n        </div>\n      );\n    }\n}\nRegister.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\nexport default connect(\n  mapStateToProps,\n  { registerUser }\n)(withRouter(Register));","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { loginUser } from \"../../actions/authActions\";\nimport classnames from \"classnames\";\n\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: \"\",\n      password: \"\",\n      errors: {}\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      // If the user is already logged in, send him to dashboard\n      this.props.history.push(\"/dashboard\");\n    }\n    // set errors if present\n    if (nextProps.errors) {\n\n      this.setState({\n        errors: nextProps.errors\n      });\n    }\n  }\n  componentDidMount() {\n\n    // If logged in and user navigates to Login page, should redirect them to dashboard\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/dashboard\");\n    }\n\n  }\n  /**\n   * Combined on change function for all components.\n   * The input event is used to get id which is the same as state name\n   * So the value of state is set to be event.target.value which is the \n   * value inputted by user\n   * @param {event} e\n   * \n   */\n  onChange = e => {\n      this.setState({ [e.target.id]: e.target.value });\n  };\n\n  /**\n   * This function is triggered when user presses log in button\n   * This sends email and password to loginUser function in authActions.js\n   * @param {Event} e \n   */\n  onSubmit = e => {\n    e.preventDefault();\n    const userData = {\n      email: this.state.email,\n      password: this.state.password\n    };\n    this.props.loginUser(userData); // since we handle the redirect within our component, \n    //we don't need to pass in this.props.history as a parameter\n  };\n\n\n  render() {\n      const { errors } = this.state;\n  return (\n      <div className=\"container\">\n        <div style={{ marginTop: \"4rem\" }} className=\"row\">\n          <div className=\"col s8 offset-s2\">\n            <Link to=\"/\" className=\"btn-flat waves-effect\">\n              <i className=\"material-icons left\">keyboard_backspace</i> Back to\n              home\n            </Link>\n\n            <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n              <h4>\n                <b>Login</b> below\n              </h4>\n              <p className=\"grey-text text-darken-1\">\n                Don't have an account? <Link to=\"/register\">Register</Link>\n              </p>\n            </div>\n            \n            <form noValidate onSubmit={this.onSubmit}>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.email}\n                  error={errors.email}\n                  id=\"email\"\n                  type=\"email\"\n                  className={classnames(\"\", {\n                    invalid: errors.email || errors.emailnotfound\n                  })}\n                />\n                <label htmlFor=\"email\">Email</label>\n                <span className=\"red-text\">\n                  {errors.email}\n                  {errors.emailnotfound}\n                </span>\n              </div>\n              <div className=\"input-field col s12\">\n                <input\n                  onChange={this.onChange}\n                  value={this.state.password}\n                  error={errors.password}\n                  id=\"password\"\n                  type=\"password\"\n                  className={classnames(\"\", {\n                    invalid: errors.password || errors.passwordincorrect\n                  })}\n                />\n                <label htmlFor=\"password\">Password</label>\n                <span className=\"red-text\">\n                  {errors.password}\n                  {errors.passwordincorrect}\n                </span>\n              </div>\n              <div className=\"col s12\" style={{ paddingLeft: \"11.250px\" }}>\n                <button\n                  style={{\n                    width: \"150px\",\n                    borderRadius: \"3px\",\n                    letterSpacing: \"1.5px\",\n                    marginTop: \"1rem\"\n                  }}\n                  type=\"submit\"\n                  className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n                >\n                  Login\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nLogin.propTypes = {\n  loginUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\nexport default connect(\n  mapStateToProps,\n  { loginUser }\n)(Login);","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      auth.isAuthenticated === true ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to=\"/login\" />\n      )\n    }\n  />\n);\nPrivateRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\nexport default connect(mapStateToProps)(PrivateRoute);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField'\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport { visuallyHidden } from '@mui/utils';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport SearchBar from \"material-ui-search-bar\";\n\nconst axios = require('axios')\n\n/**\n * Comparator function for descending sort\n * @param {Comparator} a \n * @param {Comparator} b \n * @param {String} orderBy asc or desc\n * @returns -1 if a>b, 1 if b>a 0 if equal\n */\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\n/**\n * Creates ascending and decending comparator\n * @param {String} order asc or desc\n * @param {*} orderBy \n * @returns descendingComparator value (-1,0,1)\n */\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\n// This function sorts an array given a comparator\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\n// Array of the header cells of the table\n// each element is an object containing that header cell's properties\nconst headCells = [\n  { id: 's_no', numeric: false, disablePadding: false, label: 'S. No.' },\n  { id: 'student_name', numeric: false, disablePadding: false, label: 'Name' },\n  { id: 'student_email', numeric: false, disablePadding: false, label: 'Email' },\n  { id: 'tab_change_count', numeric: true, disablePadding: false, label: 'Tab Changes' },\n  { id: 'key_press_count', numeric: true, disablePadding: false, label: 'Prohibited Key Press' },\n  { id: 'face_not_visible', numeric: false, disablePadding: false, label: 'Face Not Visible' },\n  { id: 'multiple_faces_found', numeric: false, disablePadding: false, label: 'Multiple Faces Detected' },\n  { id: 'mobile_found', numeric: false, disablePadding: false, label: 'Mobile Found' },\n  { id: 'prohibited_object_found', numeric: false, disablePadding: false, label: 'Prohibited Object Found' },\n];\n\n/**\n * Creates the Table Head\n * @param {Props} props \n * @returns rendering component\n */\nfunction EnhancedTableHead(props) {\n  const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        \n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy===headCell.id ?order:false}\n          >\n            <TableSortLabel\n              active={orderBy===headCell.id}\n              direction={orderBy===headCell.id?order:'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\n\nconst EnhancedTableToolbar = (props) => {\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n        ...(numSelected > 0 && {\n          bgcolor: (theme) =>\n            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n        }),\n      }}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          Exam Logs\n        </Typography>\n      )}\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton>\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton>\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\n/**\n * This function is the main function of this file\n * It creates the whole table\n * @returns renders the table\n */\nexport default function LogsTable(props) {\n  const [exam_code, setExamCode] = React.useState(\"\");\n  const [visibility, setVisibility] = React.useState(false);\n  const [error_text, setErrorText] = React.useState(\"\");\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('company');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [dense, setDense] = React.useState(false);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [rows,setRows]=React.useState([]);\n  const [TableData,setTableData]=React.useState([]);\n  const [searched, setSearched] = React.useState(\"\");\n\n\n  /**\n   * Gets student logs from the server using the exam code and professor's email\n   * and updates the table\n   * \n   */\n  const getData=async ()=>{\n    try {\n      // check if exam code is valid and it is one of professor's exams\n      axios.get('/api/exams/examsByProf?exam_code='+exam_code+'&prof_email='+props.prof_email)\n      .then(function (response) {\n          console.log(response);\n          // exam code valid, and permission is there so let it pass through\n      })\n      .catch(function (err) {\n          console.log(err);\n          // either exam code invalid or its not this professor's exam\n          setErrorText(\"Either exam code is invalid or you dont have permission\");\n          // clear table and make it invisible.\n          setVisibility(false);\n          setTableData([]);\n          setRows([]);\n          return;\n      });\n      const response = await axios.post('/api/logs/allData',{exam_code:exam_code});\n    \n      setErrorText(\"\");\n      setVisibility(true);\n      \n      var curr_logs=[];\n      // loop over the response and store it in the state\n      for(var i=0;i<response.data.length;i++){\n      \n        var obj=new Object();\n        obj.s_no=i+1;\n        obj.student_name = response.data[i].student_name;\n        obj.student_email = response.data[i].student_email;\n        obj.tab_change_count = response.data[i].tab_change_count;\n        obj.key_press_count = response.data[i].key_press_count;\n        obj.face_not_visible = response.data[i].face_not_visible;\n        obj.multiple_faces_found = response.data[i].multiple_faces_found;\n        obj.mobile_found = response.data[i].mobile_found;\n        obj.prohibited_object_found = response.data[i].prohibited_object_found;\n        curr_logs=[...curr_logs,obj]\n        \n      }\n      setTableData(curr_logs);\n      setRows(curr_logs);\n    }\n    catch(err){\n      console.error(err.message)\n    }\n  }\n\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.company);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n  \n  /**\n   * Filters rows based on the search string present in name or email of the student\n   * @param {String} searchVal \n   */\n  const requestSearch=(searchVal)=>{\n  \n    const filteredRows=TableData.filter((row)=>{\n      // for each row of data check if name or email contains the search string\n      if(row.student_name.toLowerCase().includes(searchVal.toLowerCase()) || row.student_email.toLowerCase().includes(searchVal.toLowerCase())) {\n        \n        return true;\n      }\n      else return false;\n    })\n    setRows(filteredRows);\n    \n\n  }\n  /**\n   * Cancels the search and sets the whole table to original position\n   */\n  const cancelSearch=()=>{\n    setSearched(\"\");\n    requestSearch(searched);\n  }\n  const isSelected = (company) => selected.indexOf(company) !== -1;\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n  const formatValue = (value) => value.toFixed(0);\n\n  return (\n    \n\n    <Box sx={{ width: '100%' }}>\n    <TextField\n      autoFocus\n      padding=\"10px\"\n      margin=\"dense\"\n      variant=\"standard\"\n      id=\"exam_code\"\n      label=\"Exam Code\"\n      type=\"text\"\n      required={true}\n      value={exam_code}\n      onChange={(e)=>setExamCode(e.target.value)}\n    />\n\n    <button\n      style={{\n        width: \"200px\",\n        borderRadius: \"3px\",\n        letterSpacing: \"1.5px\",\n        marginLeft:\"10px\",\n        marginTop: \"1rem\"\n      }}\n      onClick={getData}\n      className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n    >\n      Check Logs\n    </button>\n\n    <br/>\n\n    <p style={{color:\"red\", textAlign:\"center\"}}> {error_text} </p>\n\n    {visibility === true && (<Paper sx={{ width: '100%', mb: 2 }}>\n      \n      <SearchBar\n      value={searched}\n      onChange={(searchVal) => requestSearch(searchVal)}\n      onCancelSearch={() => cancelSearch()}\n      style={{border:'3px solid rgba(0, 0, 0, 0.05)'}}\n    />\n        <EnhancedTableToolbar numSelected={selected.length} />\n        <TableContainer >\n          <Table\n            sx={{ minWidth: 750 }}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            \n          >\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody >\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.company);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      key={row.s_no}\n                    >\n                      \n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"normal\">\n                        {row.s_no}\n                      </TableCell>\n                      <TableCell align=\"left\">{row.student_name}</TableCell>\n                      <TableCell align=\"left\">{row.student_email}</TableCell>\n                      <TableCell align=\"right\">{row.tab_change_count}</TableCell>\n                      <TableCell align=\"right\">{row.key_press_count}</TableCell>\n                      <TableCell align=\"left\">{row.face_not_visible === true? \"Yes\" : \"No\"}</TableCell>\n                      <TableCell align=\"left\">{row.multiple_faces_found === true ? \"Yes\" : \"No\"}</TableCell>\n                      <TableCell align=\"left\">{row.mobile_found === true ?\"Yes\" : \"No\"}</TableCell>\n                      <TableCell align=\"left\">{row.prohibited_object_found === true ?\"Yes\" : \"No\"}</TableCell>\n                      \n                      \n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n        \n      </Paper>)}\n      <br/>\n      <br/>\n      </Box>\n      \n  );\n}","import React, { Component, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport swal from 'sweetalert';\nimport { logoutUser } from \"../../actions/authActions\";\nimport LogsTable from \"./LogsTable.js\"\nimport { connect } from \"react-redux\";\n\nfunction ProfDashboard(props) {\n  const [examDialogOpen, setExamDialogOpen] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [exam_link, setExamLink] = useState(\"\");\n  const [date_time_start, setDateTimeStart] = useState(new Date());\n  const [duration, setDuration] = useState(0);\n  const [exam_code, setExamCode] = useState(\"\");\n  const [errorText, setErrorText] = useState(\"\");\n  const [exam_code_search, setExamCodeSearch] = useState(\"\");\n  const axios = require(\"axios\");\n\n  /**\n   * This function opens the exam dialog\n   * Triggered when user presses Create Exam button\n   */\n  function openExamDialog(){\n      setExamDialogOpen(true);\n  }\n\n  /**\n   * This function is called when user presses Cancel Button\n   * or clicks outside the dialog box\n   * It first sets all variables to their initial value then\n   * closes the dialog box\n   */\n  function closeExamDialog(){\n      setName(\"\");\n      setExamLink(\"\");\n      setDateTimeStart(new Date());\n      setDuration(0);\n      setExamCode(\"\");\n      setErrorText(\"\");\n      setExamDialogOpen(false);\n  }\n\n  /**\n   * Uses regular expressions to check if string is url or not\n   * @param {string} s \n   * @returns true if url, false otherwise\n   */\n  function isUrl(s) {\n      var regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/\n      return regexp.test(s);\n  }\n  \n  /**\n   * This function is called when Create Exam button is pressed\n   * It first checks whether all fields are correct, if not it displays error\n   * Then it sends data to server, closes the dialog and shows a notification\n   * that exam has been created\n   * \n   */\n  function createExam(){\n      if(name===\"\"){\n          setErrorText(\"Name of Exam cannot be empty\");\n          return;\n      }\n      if(exam_link===\"\"){\n          setErrorText(\"Exam Link cannot be empty\");\n          return;\n      }\n      if(!isUrl(exam_link)){\n          setErrorText(\"Exam Link must be a valid url\");\n          return;\n      }\n      if(duration === 0){\n          setErrorText(\"Duration cannot be 0\");\n          return;\n      }\n      if(exam_code===\"\"){\n          setErrorText(\"Click Generate exam code to get an exam code first\");\n          return;\n      }\n      var current_date_time = new Date();\n      if(date_time_start< current_date_time){\n        setErrorText(\"Please select a date and time of the future\");\n        return;\n      }\n      axios.post('/api/exams/createExam', {\n          name: name,\n          exam_link: exam_link,\n          date_time_start: date_time_start,\n          duration: duration,\n          exam_code: exam_code,\n          prof_email: props.prof_email,\n        })\n        .then(function (response) {\n          console.log(response);\n          swal(\"Exam has been created. Your exam code has been copied to your clipboard, please share it with the students.\");\n        })\n        .catch(function (error) {\n          console.log(error);\n          swal(\"Some error occoured in creating the exam\");\n        });\n      \n      closeExamDialog();\n      \n  }\n\n  /**\n   * Generates a random code of length 5 to be used as exam code\n   */\n  function generateCode(){\n      var result = '';\n      var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      var charactersLength = characters.length;\n      var length = 5;\n      for ( var i = 0; i < length; i++ ) {\n          result += characters.charAt(Math.floor(Math.random() * \n          charactersLength));\n      }\n      setExamCode(result);\n      navigator.clipboard.writeText(result);\n  }\n  \n\n  return (\n      <div style={{ height: \"100%\"}} className=\"container valign-wrapper\">\n        <div className=\"row\">\n          <div className=\"col s12 center-align\">\n            <h4>\n              <b>Hey there,</b> {props.name.split(\" \")[0]}\n              <p className=\"flow-text grey-text text-darken-1\">\n                You can create a new exam and see the results of previous exams. \n              </p>\n            </h4>\n            <button\n              style={{\n                width: \"200px\",\n                borderRadius: \"3px\",\n                letterSpacing: \"1.5px\",\n                marginTop: \"1rem\"\n              }}\n              onClick={openExamDialog}\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n            >\n              Create Exam\n            </button>\n            <button\n              style={{\n                width: \"200px\",\n                borderRadius: \"3px\",\n                letterSpacing: \"1.5px\",\n                marginLeft:\"10px\",\n                marginTop: \"1rem\"\n              }}\n              onClick={props.logoutUser}\n              className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n            >\n              Logout\n            </button>\n            <br/>\n            <br/>\n            <LogsTable exam_code={exam_code_search} prof_email={props.prof_email}/>\n            \n\n            \n            <Dialog open={examDialogOpen} onClose={closeExamDialog} aria-labelledby=\"form-dialog-title\" repositionOnUpdate={false}\n            style={{ padding: '10px 10px 10px 10px' }}>\n            <DialogTitle id=\"form-dialog-title\">Create Exam</DialogTitle>\n            <DialogContent margin=\"20px\" style={{ padding: \"30px\" }}>\n              <DialogContentText>\n                  Enter details for the exam. Press Generate to generate the exam code and share it with the students.\n              </DialogContentText>\n              <TextField\n                  autoFocus\n                  padding=\"10px\"\n                  margin=\"dense\"\n                  variant=\"standard\"\n                  id=\"name\"\n                  label=\"Exam Name\"\n                  type=\"text\"\n                  fullWidth\n                  required={true}\n                  value={name}\n                  onChange={(e)=>setName(e.target.value)}\n              />\n              <TextField\n                  id=\"examLink\"\n                  name=\"examLink\"\n                  label=\"Exam Link\"\n                  margin=\"dense\"\n                  variant=\"standard\"\n                  value={exam_link}\n                  onChange={(e)=> setExamLink(e.target.value)}\n                  required={true}\n                  fullWidth\n              />\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\n                  <DateTimePicker\n                      renderInput={(props) => <TextField {...props} />}\n                      label=\"DateTimePicker\"\n                      value={date_time_start}\n                      margin=\"dense\"\n                      variant=\"standard\"\n                      onChange={(newValue) => {\n                      setDateTimeStart(newValue);\n                      }}\n                  />\n              </LocalizationProvider>\n              <TextField\n                  id=\"duration\"\n                  name=\"duration\"\n                  label=\"Exam duration (minutes)\"\n                  margin=\"dense\"\n                  variant=\"standard\"\n                  value={duration}\n                  onChange={(e)=> setDuration(e.target.value)}\n                  required={true}\n                  minDate={new Date()}\n                  minTime={new Date(0, 0, 0, 8)}\n              />\n              <TextField\n                  id=\"exam_code\"\n                  name=\"exam_code\"\n                  label=\"Exam Code\"\n                  margin=\"dense\"\n                  variant=\"standard\"\n                  value={exam_code}\n                  disabled={true}\n                  onChange={(e)=> setExamCode(e.target.value)}\n                  required={true}\n                  fullWidth\n              />\n              <p style={{ color: \"red\" }}> {errorText}</p>\n              <Button onClick={generateCode}>Generate Exam Code</Button>\n              </DialogContent>\n              <DialogActions>\n              <Button onClick={closeExamDialog} color=\"secondary\">\n                  Close\n              </Button>\n              <Button onClick={createExam} color=\"primary\">\n                  Save\n              </Button>\n              </DialogActions>\n            </Dialog>\n            \n          </div>\n        </div>\n        \n      </div>\n      \n\n    );\n};\nProfDashboard.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n  };\n  const mapStateToProps = state => ({\n    auth: state.auth\n  });\n  export default connect(\n    mapStateToProps,\n    { logoutUser }\n  )(ProfDashboard);","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextField from '@mui/material/TextField';\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction StudentDashboard(props) {\n\n    const [exam_code, setExamCode] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n    const axios = require(\"axios\");\n    const moment = require(\"moment\");\n    const history = useHistory();\n\n    /**\n     * This function is called when student enters exam code to start the exam\n     * It checks the exam code, if invalid it displays error\n     * If valid, it uses the start time and duration to find if exam is running or not\n     * If running it allows student to enter, else displays error\n     */\n    function checkExamCode(){\n\n        // send exam code to server\n        axios.get('/api/exams/examByCode?exam_code='+exam_code)\n        .then(function (response) {\n            // if exam code is right\n            console.log(response);\n            let date_string = response.data.date_time_start;\n            const exam_date_time_start = new Date(date_string);\n            const exam_date_time_end = moment(exam_date_time_start).add(response.data.duration, 'm').toDate();\n            const curr_date_time = new Date();\n\n            // if exam has begun but not ended, then allow user to enter\n            if(curr_date_time >= exam_date_time_start && curr_date_time < exam_date_time_end){\n                \n              // calculate time remaining\n                var diff = Math.abs(exam_date_time_end - curr_date_time);\n                var diff_mins = Math.floor((diff/1000)/60);\n                var diff_secs = Math.floor(diff/1000)%60;\n                console.log(diff, diff_mins, diff_secs);\n                setError(\"Starting exam\");\n                // pass data to exam page and start the exam\n                let data={\n                    exam_code: exam_code,\n                    student_name: props.name,\n                    student_email: props.student_email,\n                    exam_link: response.data.exam_link,\n                    prof_email: response.data.prof_email,\n                    mins_left: diff_mins,\n                    secs_left: diff_secs,\n                };\n                history.push({ \n                    pathname: '/test',\n                    state: data\n                })\n                 \n            }\n\n            // if current time is after exam end time, show error\n            else if(curr_date_time >= exam_date_time_end){\n                setError(\"Exam has already ended\");\n            }\n\n            // if current time is before exam start, show error\n            else {\n                setError(\"Exam has not started now\");\n            }\n          })\n\n          .catch(function (error) {\n            // if exam code is invalid show error\n            console.log(error);\n            setError(\"Exam code is invalid\");\n          });\n    }\n\n    return (\n        <div style={{ height: \"75vh\"}} className=\"container valign-wrapper\">\n          <div className=\"row\">\n            <div className=\"col s12 center-align\">\n              <h4>\n                <b>Hey there,</b> {props.name.split(\" \")[0]}\n                <p className=\"flow-text grey-text text-darken-1\">\n                  Please enter the Exam Code to start the exam\n                </p>\n              </h4>\n                <TextField\n                autoFocus\n                padding=\"10px\"\n                margin=\"20px\"\n                variant=\"standard\"\n                id=\"exam_code\"\n                label=\"Exam Code\"\n                type=\"text\"\n                required={true}\n                value={exam_code}\n                onChange={(e)=>setExamCode(e.target.value)}\n                />\n              <button\n                style={{\n                  width: \"200px\",\n                  borderRadius: \"3px\",\n                  letterSpacing: \"1.5px\",\n                  marginTop: \"1rem\",\n                  marginLeft:\"1rem\"\n                }}\n                onClick={checkExamCode}\n                className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n              >\n                Start Exam\n              </button>\n              <button\n                style={{\n                  width: \"200px\",\n                  borderRadius: \"3px\",\n                  letterSpacing: \"1.5px\",\n                  marginTop: \"1rem\",\n                  marginLeft:\"1rem\"\n                }}\n                onClick={props.logoutUser}\n                className=\"btn btn-large waves-effect waves-light hoverable blue accent-3\"\n              >\n                Logout\n              </button>\n              <br/>\n              <p style={{ color: \"red\" }}>{error}</p>\n            </div>\n        </div>\n        </div>\n\n    )\n}\nStudentDashboard.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n  };\n  const mapStateToProps = state => ({\n    auth: state.auth\n  });\n  export default connect(\n    mapStateToProps,\n    { logoutUser }\n  )(StudentDashboard);","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { logoutUser } from \"../../actions/authActions\";\nimport ProfDashboard from \"./ProfDashboard\";\nimport StudentDashboard from \"./StudentDashboard\";\n\n/**\n * This is a common class for student as well as professor dashboard\n * This is called from login directly\n * Based on the type of user it renders the StudentDashboard Component or\n * ProfDashboard Component \n */\nclass Dashboard extends Component {\n  onLogoutClick = e => {\n    e.preventDefault();\n    this.props.logoutUser();\n  };\nrender() {\n    const { user } = this.props.auth;\n    console.log(user);\n    \nreturn (\n      <div >\n      {user.userType===true?<ProfDashboard name={user.name} prof_email={user.email} logoutUser={this.props.logoutUser}/>:\n      <StudentDashboard name={user.name} student_email={user.email} logoutUser={this.props.logoutUser}/>}\n      </div>\n    );\n  }\n}\nDashboard.propTypes = {\n  logoutUser: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\nexport default connect(\n  mapStateToProps,\n  { logoutUser }\n)(Dashboard);","import React from \"react\";\nimport swal from 'sweetalert';\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\nimport \"./Detections.css\";\n\n/**\n * This is the object detection class which uses webcam input \n * feed and runs coco-ssd model for object detection\n */\nexport default class Detection extends React.Component {\n  // Create video and canvas reference\n  videoRef = React.createRef();\n  canvasRef = React.createRef();\n\n  constructor(props) {\n    super(props);\n    // count in state stores no of frames passed since face is not visible\n    this.state = {count: 0};\n  }\n\n  /**\n   * ComponentDidMount Runs when the component is first loaded\n   * Setting up webcam input, loading model and calling DetectFrame which is\n   * a recursive function so that it keeps detecting throughout the test\n   */\n  componentDidMount() {\n    // setting up webcam input\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      const webCamPromise = navigator.mediaDevices\n        .getUserMedia({\n          audio: false,\n          video: {\n            facingMode: \"user\",\n            width: 800,\n            height: 400\n          }\n        })\n        .then(stream => {\n          window.stream = stream;\n          this.videoRef.current.srcObject = stream;\n          return new Promise((resolve, reject) => {\n            this.videoRef.current.onloadedmetadata = () => {\n              resolve();\n            };\n          });\n        });\n      // load model and call the detectFrame function\n      const modelPromise = cocoSsd.load();\n      Promise.all([modelPromise, webCamPromise])\n        .then(values => {\n          this.detectFrame(this.videoRef.current, values[0]);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }\n\n  /**\n   * Use the model to detect objects in the frame, pass the predictions\n   * to renderPredictions function then call detectFrame again\n   * @param {videoRef} video \n   * @param {ModelPromise} model \n   */\n  detectFrame = (video, model) => {\n    model.detect(video).then(predictions => {\n\n      if (this.canvasRef.current) {\n        \n        this.renderPredictions(predictions);\n        requestAnimationFrame(() => {\n          this.detectFrame(video, model);\n        });\n      } else {\n        return false;\n      }\n    });\n  };\n  \n  renderPredictions = predictions => {\n    \n    // setting up the canvas for drawing rectangles and printing \n    // prediction text\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.font = \"16px sans-serif\";\n    ctx.textBaseline = \"top\";\n\n    // looping on predictions and drawing the bounding box for each object\n    // and the text label background\n    predictions.forEach(prediction => {\n\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n      // Draw the bounding box.\n      ctx.strokeStyle = \"#00FFFF\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(x, y, width, height);\n      // Draw the label background.\n      ctx.fillStyle = \"#00FFFF\";\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(\"16px sans-serif\", 10); // base 10\n      ctx.fillRect(x, y, textWidth + 8, textHeight + 8);\n      \n    });\n\n    // Looping over all predictions and drawing text (prediction class)\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      \n      ctx.fillStyle = \"#000000\";\n\n      // Draw the text last to ensure it's on top.\n      if (prediction.class === \"person\" || prediction.class === \"cell phone\" || prediction.class === \"book\" || prediction.class === \"laptop\") {\n        ctx.fillText(prediction.class, x, y);\n      }\n    });\n    \n    var faces = 0;\n      // if face is not visible till 50 consecutive frames, student is\n      // not in front of the computer, throw an error\n      if (predictions.length === 0 && this.state.count <50){\n        this.state.count++;\n      }\n      else if (predictions.length === 0) {\n        this.state.count=0;\n        swal(\"Face Not Visible\", \"Action has been Recorded\", \"error\");\n        this.props.FaceNotVisible();\n      }\n\n      // loop over all predictions and check if mobile phone, book, laptop or multiple\n      // people are there in the frame \n      for (let i = 0; i < predictions.length; i++) {\n\n        if (predictions[i].class === \"cell phone\") {\n          this.props.MobilePhone();\n          swal(\"Cell Phone Detected\", \"Action has been Recorded\", \"error\");\n          \n        }\n\n        else if (predictions[i].class === \"book\" || predictions[i].class === \"laptop\") {\n          this.props.ProhibitedObject();\n          swal(\"Prohibited Object Detected\", \"Action has been Recorded\", \"error\");\n          \n        }\n        \n        else if (predictions[i].class === \"person\") {\n          faces += 1;\n          this.state.count=0;\n        }\n\n      }\n      if(faces > 1){\n        this.props.MultipleFacesVisible();\n        swal(faces.toString()+\" people detected\", \"Action has been recorded\", \"error\");\n      }\n\n  };\n\nrender() {\n    return (\n      <div>\n        <video\n          className=\"size\"\n          autoPlay\n          playsInline\n          muted\n          ref={this.videoRef}\n          width= \"800\"\n          height= \"400\"\n        />\n        <canvas\n          className=\"size\"\n          ref={this.canvasRef}\n          width=\"800\"\n          height=\"400\"\n        />\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Detection from './Object_Detection';\nimport { Button } from '@mui/material';\nimport swal from 'sweetalert';\nimport \"./ExamPage.css\";\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport axios from 'axios';\n\nexport default function TestPage(props){\n\n  const [student_name, setStudentName] = useState(props.location.state.student_name);\n  const [student_email, setStudentEmail] = useState(props.location.state.student_email);\n  const [exam_id, setExamId] = useState(props.location.state.exam_code);\n  const [form_link, setFormLink] = useState(props.location.state.exam_link);\n  const [minutes, setMinutes] = useState(parseInt(props.location.state.mins_left));\n  const [seconds, setSeconds] = useState(parseInt(props.location.state.secs_left));\n  const [tab_change, setTabChange] = useState(0);\n  const [key_press, setKeyPress] = useState(0);\n  const [full_screen_exit, setFullScreenExit] = useState(0);\n  const [mobile_phone_found, setMobilePhoneFound] = useState(false);\n  const [prohibited_object_found, setProhibitedObjectFound] = useState(false);\n  const [face_not_visible, setFaceNotVisible] = useState(false);\n  const [multiple_faces_visible, setMultipleFacesVisible] = useState(false);\n  const [checkedPrevLogs, setCheckedPrevLogs] = useState(false);\n  \n  const history = useHistory();\n\n  /**\n   * The below 4 functions are helper functions to set state\n   * Are passed to the ObjectDetection component to allow it\n   * to change state of its parent (This component)\n   */\n  function update_mobile_phone_found(){\n    setMobilePhoneFound(true);\n  }\n  function update_prohibited_object_found(){\n    setProhibitedObjectFound(true);\n  }\n  function update_face_not_visible(){\n    setFaceNotVisible(true);\n  }\n  function update_multiple_faces_visible(){\n    setMultipleFacesVisible(true);\n  }\n  /**\n   * This function sends the current exam logs to the backend \n   * to update the database. This function is called every second.\n   */\n  function sendLogsToServer(){\n    axios.post('/api/logs/update',{\n          exam_code: exam_id,\n          student_name: student_name,\n          student_email: student_email,\n          key_press_count: key_press,\n          tab_change_count: tab_change,\n          mobile_found: mobile_phone_found,\n          face_not_visible: face_not_visible,\n          prohibited_object_found: prohibited_object_found,\n          multiple_faces_found: multiple_faces_visible,\n      })\n      .then(function (response){\n\n        console.log(response);\n      })\n      .catch(function (error){\n        console.log(error);\n      })\n      \n  }\n  /**\n   * This function is called when test page is opened for the first time\n   * It retrieves cheating data from the server if the student had given the exam\n   * before and closed the window in between\n   */\n  function getPreviousLogs(){\n      axios.get('/api/logs/logByEmail?exam_code='+exam_id+'&student_email='+student_email)\n      .then(function (response) {\n          console.log(response);\n          setKeyPress(parseInt(response.data.key_press_count));\n          setTabChange(parseInt(response.data.tab_change_count));\n          setMobilePhoneFound(response.data.mobile_found);\n          setMultipleFacesVisible(response.data.multiple_faces_found);\n          setProhibitedObjectFound(response.data.prohibited_object_found);\n          setFaceNotVisible(response.data.face_not_visible);\n      })\n      .catch(function (err) {\n          console.log(err);\n      });\n  }\n\n  /**\n   * Function checks for tab change or minimising the window/ opening\n   * another window by checking if the window is in focus or not\n   */\n  function handleVisibilityChange() {\n    if (document.hidden) {\n        // the page is hidden\n        setTabChange(tab_change+1);\n        swal(\"Changed Tab Detected\", \"Action has been Recorded\", \"error\");\n        \n        \n    } else {\n      // the page is visible\n    }\n  }\n\n  /**\n   * This function is triggered every time a key is pressed. It the pressed \n   * key is Ctrl or Alt it shows an error and updates count\n   * @param {Keypress Event} event \n   * @returns false if key is Ctrl or Alt else true\n   */\n  function handleKeyPress(event){\n    \n      if (event.altKey) {\n          setKeyPress(key_press+1);\n          swal('Alt Key Press Detected',\"Action has been Recorded\", \"error\");\n          return false;\n      }\n      else if(event.ctrlKey) {\n          setKeyPress(key_press+1);\n          swal('Ctrl Key Press Detected',\"Action has been Recorded\", \"error\");\n          return false;\n      }\n      else {\n          return true;\n      }\n      \n  }\n\n  useEffect(() => {\n    \n    // Initialising all the event handlers when the page loads\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange, false);\n    document.addEventListener('contextmenu', function (e) {\n        e.preventDefault();\n      }, false);\n    document.addEventListener('keydown',handleKeyPress, false);\n    \n    if(!checkedPrevLogs){\n      getPreviousLogs();\n      setCheckedPrevLogs(true);\n  }\n\n    // Removing all event handlers when the page exits\n    return function cleanup() {\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n      document.removeEventListener('contextmenu', function (e) {\n        e.preventDefault();\n      }, false);\n      document.removeEventListener('keydown',(event)=>handleKeyPress(event), false);\n    }\n  })\n\n  /**\n   * This useEffect function runs every second. It is used to update\n   * the minutes and seconds counter and send cheating data to server\n   */\n  useEffect(() => {\n    let myInterval = setInterval(() => {\n      if (seconds > 0) {\n        setSeconds(seconds - 1);\n      }\n      else {\n          setMinutes(minutes - 1);\n          setSeconds(59);\n        }\n\n        if (minutes === 1 && seconds === 0) {\n          swal(\"Only 1 Minute Left, Please Submit or attendance wont be marked\");\n        }\n\n      if (seconds <= 0 && minutes <= 0) {\n          <Redirect to='/thankyou'/>\n        }\n      sendLogsToServer();\n  \n    },1000);\n    return () => {\n      clearInterval(myInterval);\n    };\n\n  });\n  \n  /**\n   * This function is called when the student presses exit exam button\n   * since data is shared with the backend every second we just redirect to \n   * the dashboard after showing a confirmation message\n   */\n  function handleSubmit(){\n      swal(\"Thank You for taking the exam. Logs have been shared with your professor\");\n      history.push('/dashboard');\n  }\n  return (\n      <div style={{ height: \"100%\"}} className=\"my_container\" id=\"my_container\">\n    \n\n      <div className=\"detect\">\n        <Detection MobilePhone={update_mobile_phone_found} ProhibitedObject={update_prohibited_object_found} FaceNotVisible={update_face_not_visible} MultipleFacesVisible={update_multiple_faces_visible}/>\n        \n      </div>\n\n      <br/>\n      <div className=\"name\">\n        <h6 align=\"left\">Name:  <span style={{ fontSize: '20px' }} > {student_name}</span></h6>\n        <h6 align=\"left\">Exam ID:  <span style={{ fontSize: '20px' }} > {exam_id}</span></h6>\n      </div>\n\n      <div className=\"time_rem\">\n        <p>Timer: {minutes === 0 && seconds === 1 ? null : <h1 align=\"center\" style={{ fontSize: '69px' }}>  {minutes}:{seconds < 10 ? `0${seconds}` : seconds}</h1>\n        } </p>\n      </div>\n\n      <div className=\"instructions\">\n        <p align=\"center\" style={{ fontSize: '18px' }}>To Save Your Attendance :<br/> Kindly Click <strong>Exit Exam</strong> after submitting the exam </p>\n        </div>\n        <div className=\"exit\">\n        <center>\n          <Button\n            style={{ fontSize: '15px' }}\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"medium\"\n            onClick={handleSubmit}>\n            Exit Exam\n            </Button>\n        </center>\n        </div>\n        \n      \n        <div className=\"test\">\n      <iframe src={form_link} id='form'> Loading… </iframe>\n      </div>\n\n    \n\n  </div>\n  )\n\n\n}","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\"\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\n\nimport Navbar from \"./components/layout/Navbar\";\nimport Landing from \"./components/layout/Landing\";\nimport Register from \"./components/auth/Register\";\nimport Login from \"./components/auth/Login\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport TestPage from \"./components/exam_page/TestPage\";\n\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n// Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\n\n/**\n * Main component of the website which has a navbar on top of all pages\n * and a router which displays the correct component based on URL\n */\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\" >\n            <Navbar />\n            \n            <Route exact path=\"/\" component={Landing} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <Switch>\n              <PrivateRoute exact path=\"/dashboard\" component={Dashboard} />\n              <Route exact path=\"/test\" component={TestPage} />\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}